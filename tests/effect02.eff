(* Program *)

let backtrack = handler
    | effect Decide _ k ->
        with handler
            | effect Fail _ _ -> k false
        handle
            k true
;;

let rec chooseInt p =
    let m = (fst p) in
    let n = (snd p) in
    if m > n then
        fail ()
    else
        let b = decide () in
        if b then
            m
        else
            chooseInt (m + 1, n)
;;

let sqrt m =
    let rec try n =
        let n2 = n * n in
        if n2 > m then
            ()
        else if n2 = m then
            n
        else
            try (n + 1)
    in try 0
;;

let pythagorean p =
    let m = (fst p) in
    let n = (snd p) in
    let a = chooseInt (m, n - 1) in
    let b = chooseInt (a + 1, n) in
    let c = sqrt(a*a + b*b) in
    if c then
        (a, b, c)
    else
        fail ()
;;

with backtrack handle pythagorean (3, 4) ;;

